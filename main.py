from aiogram import *
import config as cfg
from keyboards.kb import *
import parse
import sqlite3
from db import BotDB
import random
import logging
from pyqiwip2p import QiwiP2P
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

QIWI_PRIV_KEY=cfg.QIWI

let="AaBbCcDdEeFfGg"

p2p = QiwiP2P(auth_key=QIWI_PRIV_KEY)

TOKEN_API = cfg.TOKEN

logging.basicConfig(level=logging.ERROR, filename="py_log.log",filemode="w")

storage = MemoryStorage()
bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=storage)

class BotStatesGroup(StatesGroup):
    waiting_ad_vpl = State()
    statr_vpl = State()
    start_user_vpl = State()
    otziv = State()
    rassl = State()

BotDB=BotDB('bd.db')

cfg.managers = cfg.managers + ", " + cfg.admins

def check_reg(id):
    if not BotDB.user_exists(id):
        return False
    else:
        return True

def create_pay(id, amount, callback):
    comment = str(id) + "_" + str(amount) + "_" + callback + "_" + str(random.randint(10000, 99999))
    bill_id=str(random.randint(10000, 99999)) + comment + "_" + str(random.randint(10000, 99999))
    bill = p2p.bill(bill_id=bill_id, amount = amount, lifetime=15, comment=comment)
    url = p2p.check(bill_id).pay_url
    BotDB.SavePay(id, bill_id, comment)
    return url

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if not BotDB.user_exists(message.from_user.id):
        BotDB.newUser(message.from_user.id)
        for i in (cfg.managers).split(", "):
            await bot.send_message(chat_id=i, text=f"–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! {message.from_user.id}[–Ω–∏–∫: {message.from_user.username}]")
        #await bot.send_message(chat_id=[i for i in (cfg.managers).split(", ")], text=f"–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! {message.from_user.id}[–Ω–∏–∫: {message.from_user.username}]")
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Quade Shop. \n–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=create_main_kb(BotDB.check_subscribe(message.from_user.id)))

@dp.message_handler(commands=['admin'])
async def admin(message: types.message):
    if str(message.from_user.id) in cfg.managers.split(", "):
        await bot.send_message(message.chat.id, '‚òéAdmin –ü–∞–Ω–µ–ª—å', reply_markup=kb_admin)
    else:
        await bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')

@dp.message_handler(text="üéÆ–ú–∞–≥–∞–∑–∏–Ω")
async def shop(message: types.Message):
    id = message.from_user.id
    if check_reg(id) == True:
        await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ", reply_markup=create_main_inline_kb())
    else:
        await message.reply(f"–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")

@dp.message_handler(text="–û—Ç–∑—ã–≤—ã‚ú®")
async def shop(message: types.Message):
    id = message.from_user.id
    if check_reg(id) == True:
        await message.reply(f"–û—Ç–∑—ã–≤—ã @quade_shop_reviews")
    else:
        await message.reply(f"–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")


@dp.callback_query_handler()
async def shop_kb(callback: types.CallbackQuery, state=FSMContext):
    if check_reg(callback.from_user.id) == True:
        if callback.data == 'discord':
            await callback.answer(text='Discord Nitro')
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ', reply_markup=create_kb()["inline_kb_ds_shop"])
        elif callback.data == "steam":
            await callback.answer(text='Steam Gift')
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É: ', reply_markup=create_kb()["inline_kb_steam_shop"])
        elif callback.data == "gplay":
            await callback.answer(text='Warning‚ùó–¢–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç—É—Ä–µ—Ü–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —ç—Ç–∏ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—å—Å—è –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–æ—Å—Ç—å.')
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='Warning‚ùó–¢–æ–ª—å–∫–æ –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç—É—Ä–µ—Ü–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —ç—Ç–∏ –∫–æ–¥—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—å—Å—è –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –º—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–æ—Å—Ç—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É: ', reply_markup=create_kb()["inline_kb_gplay_shop"])
        elif callback.data == "xbox":
            await callback.answer(text='Xbox Ultimate + Forza 5 Premium')
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='Xbox GamePass Ultimate + Forza Horizon 5 Premium \n(–Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç): ', reply_markup=create_kb()["inline_kb_xbox_shop"])
        elif callback.data == "discord-basic-moth":
            amount = cfg.get_price()["basic_moth"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "discord-basic-year":
            amount = cfg.get_price()["basic_year"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "discord-full-moth":
            amount = cfg.get_price()["full_moth"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "discord-full-year":
            amount = cfg.get_price()["full_year"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "xbox-lifetime":
            amount = cfg.get_price()["xbox_lifetime"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == 'steam-rg':
            amount = cfg.get_price()["steam_rg"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–ï—Å–ª–∏ –≤—ã —É–∂–µ –º–µ–Ω—è–ª–∏ —Ä–µ–≥–∏–æ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂!(–ú—ã –Ω–µ —Å–º–æ–∂–µ–º —Å–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ)\nüö©–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω–∞ –≤–∞–º –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å, —Å–æ–≤–µ—Ä—à–∞—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–∫—É–ø–∫–∏, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ —Å–≤–æ–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ 3 –¥–Ω—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π 5 –¥–Ω–µ–π, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–∞—Ä–∫–∏ 3 –¥–Ω—è. –ö —Ç–æ–º—É –∂–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–µ–≥–∏–æ–Ω 3 –º–µ—Å—è—Ü–∞.\n–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "steam-wallet-20":
            amount = cfg.get_price()["steam_20"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "steam-wallet-50":
            amount = cfg.get_price()["steam_50"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "steam-wallet-100":
            amount = cfg.get_price()["steam_100"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "steam-wallet-200":
            amount = cfg.get_price()["steam_200"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-25":
            amount = cfg.get_price()["gplay_25"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-50":
            amount = cfg.get_price()["gplay_50"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-100":
            amount = cfg.get_price()["gplay_100"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-250":
            amount = cfg.get_price()["gplay_250"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-500":
            amount = cfg.get_price()["gplay_500"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "google-play-1000":
            amount = cfg.get_price()["gplay_1000"]
            id = callback.from_user.id
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ –±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", —á—Ç–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å"', reply_markup=create_pay_kb(create_pay(id=id, amount=amount, callback=callback.data)))
        elif callback.data == "check":
            id = callback.from_user.id
            bill_id = BotDB.CheckPay(id)[0]
            if BotDB.CheckPay(id)[1] ==p2p.check(bill_id).comment:
                status = p2p.check(bill_id).status
                await bot.send_message(chat_id=callback.message.chat.id, text=f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
                if status == "PAID":
                    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
                    BotDB.addBill(id)
                    purchase = str(((p2p.check(bill_id).comment).split("_")[2]).replace("-", " ") + " " + (p2p.check(bill_id).comment).split("_")[1] + " —Ä—É–±.")
                    BotDB.add_purchases(id, purchase)
                    if "xbox-lifetime" in ((p2p.check(bill_id).comment).split("_")[2]):
                        BotDB.add_subscribe(id, 1)
                        await bot.send_message(chat_id=callback.message.chat.id, text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", reply_markup=create_main_kb(BotDB.check_subscribe(callback.message.chat.id)))
                        BotDB.create_task(id, callback.from_user.username, "XBOX LIFE TIME", p2p.check(bill_id).amount, 1)
                    elif "discord" in ((p2p.check(bill_id).comment).split("_")[2]):
                        BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 0)
                        await bot.send_message(chat_id=callback.message.chat.id, text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ –Ω–∞—á–Ω–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑!", reply_markup=create_main_kb(BotDB.check_subscribe(callback.message.chat.id)))
                        product = (p2p.check(bill_id).comment).split("_")[2]
                        for i in (cfg.managers).split(", "):
                            await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}(–Ω–∏–∫: {callback.from_user.username}), –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑: {product}, —Ü–µ–Ω–Ω–æ–π: {p2p.check(bill_id).amount} —Ä—É–±.")
                    elif "google-play" in ((p2p.check(bill_id).comment).split("_")[2]):
                        if cfg.gplay_auto==False:
                            BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 0)
                            await bot.send_message(chat_id=callback.message.chat.id, text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ –Ω–∞—á–Ω–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑!", reply_markup=create_main_kb(BotDB.check_subscribe(callback.message.chat.id)))
                            product = (p2p.check(bill_id).comment).split("_")[2]
                            for i in (cfg.managers).split(", "):
                                await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}(–Ω–∏–∫: {callback.from_user.username}), –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑: {product}, —Ü–µ–Ω–Ω–æ–π: {p2p.check(bill_id).amount} —Ä—É–±.")
                        else:
                            BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 1)
                            await bot.send_message(chat_id=callback.from_user.id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∫–ª—é—á {123}")
                    elif "steam-wallet" in ((p2p.check(bill_id).comment).split("_")[2]):
                        if cfg.steam_auto==False:
                            BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 0)
                            await bot.send_message(chat_id=callback.message.chat.id, text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ –Ω–∞—á–Ω–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑!", reply_markup=create_main_kb(BotDB.check_subscribe(callback.message.chat.id)))
                            product = (p2p.check(bill_id).comment).split("_")[2]
                            for i in (cfg.managers).split(", "):
                                await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}(–Ω–∏–∫: {callback.from_user.username}), –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑: {product}, —Ü–µ–Ω–Ω–æ–π: {p2p.check(bill_id).amount} —Ä—É–±.")
                        else:
                            BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 1)
                            await bot.send_message(chat_id=callback.from_user.id, text=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à –∫–ª—é—á {123}")
                    elif "steam-rg" in ((p2p.check(bill_id).comment).split("_")[2]):
                        BotDB.create_task(id, callback.from_user.username, (p2p.check(bill_id).comment).split("_")[2], p2p.check(bill_id).amount, 0)
                        await bot.send_message(chat_id=callback.message.chat.id, text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ –Ω–∞—á–Ω–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑!", reply_markup=create_main_kb(BotDB.check_subscribe(callback.message.chat.id)))
                        product = (p2p.check(bill_id).comment).split("_")[2]
                        for i in (cfg.managers).split(", "):
                            await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}(–Ω–∏–∫: {callback.from_user.username}), –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑: {product}, —Ü–µ–Ω–Ω–æ–π: {p2p.check(bill_id).amount} —Ä—É–±.")
            else:
                await bot.send_message(chat_id=callback.message.chat.id, text=f"–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂!")
        elif callback.data == "reject":
            id = callback.from_user.id
            bill_id = BotDB.CheckPay(id)[0]
            if BotDB.CheckPay(id)[1] ==p2p.check(bill_id).comment and p2p.check(bill_id).status != "PAID" or "REJECT":
                p2p.reject(bill_id)
                status = p2p.check(bill_id).status
                await bot.send_message(chat_id=callback.message.chat.id, text=f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –∑–∞–∫—Ä—ã—Ç!\n–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
                await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            else:
                await bot.send_message(chat_id=callback.message.chat.id, text=f"–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂! –ò–ª–∏ –æ–Ω —É–∂–µ –æ–ø–ª–∞—á–µ–Ω/–∑–∞–∫—Ä—ã—Ç.")
        elif callback.data == "history":
            id = callback.from_user.id
            purchases = BotDB.get_purchases(id)
            await bot.send_message(chat_id=callback.message.chat.id, text=f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n{purchases}")
        if callback.data == 'back':
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=create_main_inline_kb())
        if callback.data == "otziv":
            await BotStatesGroup.otziv.set()
            await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É —Å –æ—Ç–∑—ã–≤–∞–º–∏(@quade_shop_reviews): ", reply_markup=None)
            @dp.message_handler(state=BotStatesGroup.otziv)
            async def otziv(message: types.Message, state: FSMContext):
                await bot.send_message(chat_id=BotDB.get_admin_id(message.from_user.id), text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}({message.from_user.username}), –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤: {message.text}")
                await bot.forward_message(chat_id = "-1001564221496", from_chat_id=message.from_user.id, message_id=message.message_id)
                await state.finish()
        if callback.data == 'start_msg':
            if BotDB.check_task_Status(callback.from_user.id) == True:
                await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text="–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–π–¥—É—Ç –¥–æ –∞–¥–º–∏–Ω–∞!")
                await BotStatesGroup.start_user_vpl.set()
                @dp.message_handler(state=BotStatesGroup.start_user_vpl)
                async def start_vpl_user(message: types.Message, state: FSMContext):
                    if BotDB.check_task_Status(message.from_user.id) == True:
                        if BotDB.check_pause(message.from_user.id) == False:
                            temp = f"{message.from_user.id}:\n{message.text}"
                            await bot.send_message(chat_id=BotDB.get_admin_id(message.from_user.id), text=temp)
                        else:
                            BotDB.save_message(id=message.from_user.id, message=message.text)
                    else:
                        await state.finish()
                    
                @dp.message_handler(content_types=['photo'], state=BotStatesGroup.start_user_vpl)
                async def start_vpl_user_photo(message: types.Message, state: FSMContext):
                    if BotDB.check_task_Status(message.from_user.id) == True:
                        temp = message.photo[0].file_id
                        temp_text = f"{message.from_user.id}:\n{message.caption}"
                        await bot.send_photo(chat_id=BotDB.get_admin_id(message.from_user.id), photo=temp, caption=temp_text)
                    else:
                        await state.finish()
            else:
                await bot.send_message(chat_id=callback.from_user.id, text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –Ω–µ –æ–¥–∏–Ω –≤–∞—à –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—å—Å—è. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —á–∞—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @quade_help_bot")
        if str(callback.from_user.id) in cfg.managers.split(", "):
            item = callback.data.replace("(", "").replace(")", "").split(",")
            item_old = item
            if BotDB.check_pause(id=item[0]) == True or BotDB.check_task_Status(id=item[0]) == False:
                if callback.data in str(list(BotDB.get_task())):
                    item = callback.data
                    if BotDB.check_pause(id=int(item_old[0])) == True:
                        yes = InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å', callback_data=str(item))
                    else:
                        yes = InlineKeyboardButton('–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å', callback_data=str(item))
                    back = InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_pr')
                    inline_kb_yes = InlineKeyboardMarkup()
                    inline_kb_yes.add(yes, back)
                    await BotStatesGroup.waiting_ad_vpl.set()
                    await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text=str(item), reply_markup=inline_kb_yes)
            else:
                await bot.send_message(chat_id=callback.from_user.id, text="–û–¥–∏–Ω –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—å—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π!")
                keyboard = types.InlineKeyboardMarkup()
                button_list = []
                for item in list(BotDB.get_task()):
                    button_list.append(types.InlineKeyboardButton(text=str(item), callback_data=str(item)))
                keyboard.add(*button_list)
                await bot.send_message(chat_id=callback.from_user.id, text='–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ', reply_markup=keyboard)
    else:
        await bot.send_message(chat_id=callback.from_user.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@dp.callback_query_handler(state=BotStatesGroup.waiting_ad_vpl)
async def waiting_adm(callback: types.CallbackQuery, state: FSMContext):
    if str(callback.from_user.id) in cfg.managers.split(", "):
        if callback.data in f"{list(BotDB.get_task())}":
            item = callback.data.replace("(", "").replace(")", "").split(",")
            if BotDB.check_pause(id=item[0]) == False:
                BotDB.create_old_task(item[0], item[2], callback.from_user.id)
                await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text=f"–í—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–Ω–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑: <b>'{str(item)}'</b>", parse_mode="html")
                await bot.send_message(chat_id=callback.from_user.id, text="–ü–∏—à–∏—Ç–µ —Å—é–¥–∞ —á—Ç–æ –±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É: ", reply_markup=kb_vpl)
                await bot.send_message(chat_id=item[0], text=f"–í–∞—à –∑–∞–∫–∞–∑ <b>{item[2]}</b> –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è!", parse_mode="html")
                await bot.send_message(chat_id=item[0], text="–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ': ", reply_markup=kb_start_msg)
            else:
                await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text=f"–í—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑: <b>'{str(item)}'</b>", parse_mode="html")
                await bot.send_message(chat_id=callback.from_user.id, text="–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–∞—É–∑–µ: ", reply_markup=kb_vpl)
                for i in (str(BotDB.get_message(item[0]))[1:-3]).split("/new/"):
                    await bot.send_message(chat_id=callback.from_user.id, text=i)
            await BotStatesGroup.statr_vpl.set()
            @dp.message_handler(state=BotStatesGroup.statr_vpl)
            async def start_vpl(message: types.Message, state: FSMContext):
                if message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!":
                    id=item[0]
                    task=str(item[2]).replace(" ", '').replace("'", '')
                    BotDB.task_stop(int(id), task)
                    BotDB.delete_old_task(int(id))
                    await message.reply(f"–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑ {task}, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}", reply_markup=kb_admin)
                    await bot.send_message(chat_id=int(id), text=f"–í–∞—à –∑–∞–∫–∞–∑ <b>{task}</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", parse_mode="html", reply_markup=otizv_kb)
                    await state.finish()
                elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ'":
                    id=item[0]
                    await bot.send_message(chat_id=int(id), text=f"–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ':", reply_markup=kb_start_msg)
                elif message.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–∞—É–∑—É":
                    id=item[0]
                    task=str(item[2]).replace(" ", '').replace("'", '')
                    BotDB.pause_task(id)
                    await bot.send_message(chat_id=message.from_user.id, text=f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {id}, {task} –Ω–∞ –ø–∞—É–∑—É.", reply_markup=kb_admin)
                    await state.finish()
                else:
                    temp = message.text
                    id = item[0]
                    await bot.send_message(chat_id=id, text=temp)
            @dp.message_handler(content_types=['photo'], state=BotStatesGroup.statr_vpl)
            async def start_vpl1(message: types.Message, state: FSMContext):
                temp = message.photo[0].file_id
                temp_text = message.caption
                id = item[0]
                await bot.send_photo(chat_id=id, photo=temp, caption=temp_text)
        if callback.data == "back_pr":
            if str(callback.from_user.id) in cfg.managers.split(", "):
                keyboard = types.InlineKeyboardMarkup()
                button_list = []
                for item in list(BotDB.get_task()):
                    button_list.append(types.InlineKeyboardButton(text=str(item), callback_data=str(item)))
                keyboard.add(*button_list)
                await state.finish()
                await bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id, text='–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ', reply_markup=keyboard)

@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞")
async def rassl(message: types.Message, state: FSMContext):
    if str(message.from_user.id) in cfg.admins.split(", "):
        await BotStatesGroup.rassl.set()
        await bot.send_message(chat_id=message.from_user.id, text="–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ —á—Ç–æ –±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: ", reply_markup=None)
        @dp.message_handler(state=BotStatesGroup.rassl)
        async def rassl(message: types.Message, state: FSMContext):
            temp = message.text
            id_list = (str(BotDB.get_all_id()).replace("(", "").replace(",)", "").replace("[", "").replace("]", "")).split(", ")
            logging.info(f"{id_list, type(id_list)}", exc_info=True)
            await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É!")
            await state.finish()
            for i in id_list:
                try:
                    await bot.send_message(chat_id=int(i), text=temp)
                except:
                    logging.error(f"{i} DA {id_list}", exc_info=True)
            await message.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!")
        @dp.message_handler(state=BotStatesGroup.rassl, content_types=['photo'])
        async def rassl_photo(message: types.Message, state: FSMContext):
            temp = message.photo[0].file_id
            temp_text = message.caption
            id_list = (str(BotDB.get_all_id()).replace("(", "").replace(",)", "").replace("[", "").replace("]", "")).split(", ")
            await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É!")
            await state.finish()
            for i in id_list:
                await bot.send_photo(chat_id=int(i), photo=temp, caption=temp_text)
            await message.answer("–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")

@dp.message_handler(text="üåà–ü—Ä–æ—Ñ–∏–ª—å")
async def shop(message: types.Message):
    id = message.from_user.id
    if check_reg(id) == True:
        if str(message.from_user.id) in cfg.admins.split(", "):
            status = "–ê–¥–º–∏–Ω"
        elif str(message.from_user.id) in cfg.managers.split(", "):
            status = "–ú–µ–Ω–µ–¥–∂–µ—Ä"
        else:
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if BotDB.check_subscribe(id) == True:
            subscribe = "Game Pass + Forza"
        else:
            subscribe = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        count = BotDB.get_stat(id)
        await message.reply(f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b> {message.from_user.username} ‚úÖ\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscribe}\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:</b> {count}", parse_mode="html", reply_markup=inline_kb_history)
    else:
        await message.reply(f"–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")

@dp.message_handler(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stat(message: types.Message):   
    if str(message.from_user.id) in cfg.admins.split(", "):
        await message.reply(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {BotDB.countUser()}\n*–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {1}\n*–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫:* {BotDB.get_count_purchase()}\n*–°–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* {1}\n*–°—É–º–º–∞ —Å–¥–µ–ª–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* {1}\n*–û–±—â–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–æ–∫:* {BotDB.get_sum_purchase_all()}\n*–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:* {1}\n*–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±–ª—å –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:* {1}", parse_mode="Markdown")


@dp.message_handler(text="–î–∞–Ω–Ω—ã–µ‚úâ")
async def xbox_data(message: types.Message):
    if BotDB.check_subscribe(message.from_user.id)==True:
        keyboard = InlineKeyboardButton("–¢—É—Ç–æ—Ä–∏–∞–ª", callback_data='tutorial', url="https://telegra.ph/Forza-Horizon-Aktivaciya-04-27")
        inl_tutor = InlineKeyboardMarkup()
        inl_tutor.add(keyboard)
        await message.reply(f"–õ–æ–≥–∏–Ω: {parse.get_data()[0]} –ü–∞—Ä–æ–ª—å: {parse.get_data()[1]}")
        await message.answer(f"–ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø–æ–º–µ–Ω—è–ª—Å—è, –Ω–æ–≤—ã–π –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫—É–¥–∞ –ø–∏—Å–∞—Ç—å!!!", reply_markup=inl_tutor)
    else:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

@dp.message_handler(text="üåü–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def shop(message: types.Message):
    await message.reply(f"@quade_help_bot - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—éüöÄ (–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ –≤—Å–µ–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–∏—à–∏—Ç–µ @ne_martoy)")

@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back(message: types.Message):
    id = message.from_user.id
    if check_reg(id) == True:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Quade Shop. \n–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=create_main_kb(BotDB.check_subscribe(message.from_user.id)))
    else:
        await message.reply(f"–í–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start")

@dp.message_handler(text="–ó–∞–∫–∞–∑—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é")
async def execution(message: types.Message):
    if str(message.from_user.id) in cfg.managers.split(", "):
        keyboard = types.InlineKeyboardMarkup()
        button_list = []
        for item in list(BotDB.get_task()):
            button_list.append(types.InlineKeyboardButton(text=str(item), callback_data=str(item)))
        keyboard.add(*button_list)
        await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: ', reply_markup=keyboard)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
